#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2018 Nathan Chancellor
#
# Utility and terminal setup functions for my Pixelbook


# Setup function
function bootstrap() {
    # Common variables
    local KEYS; KEYS=${HOME}/Downloads/keys
    local REPOS; REPOS=${HOME}/Downloads/persistent/repos
    local DOTFILES; DOTFILES=${REPOS}/dotfiles
    local SCRIPTS; SCRIPTS=${REPOS}/scripts

    # Grab common functions/variables
    [[ ! -f ${SCRIPTS}/common ]] && source <(curl -Ls https://github.com/nathanchance/scripts/raw/master/common) &>/dev/null

    # Make sure keys are present
    [[ ! -d ${KEYS} ]] && { warn "${KEYS} not found, skipping GPG and SSH keys setup!"; NO_KEYS=true; }

    # Setup binaries
    install-bin -c
    sudo crouton -r stretch -t cli-extra

    # Setup SSH and GPG if keys are present
    if [[ -z ${NO_KEYS} ]]; then
        mkdir -p "${HOME}"/.ssh
        mv "${KEYS}"/id_ed25519{,.pub} "${HOME}"/.ssh
        chmod 600 "${HOME}"/.ssh/id_ed25519

        # Setup GPG
        gpg --import "${KEYS}"/{public*,private*}.asc
        gpg --import-ownertrust "${KEYS}"/ownertrust*.asc
        {
            echo "default-cache-ttl 3600"
            echo "max-cache-ttl 86400"
        } > "${HOME}"/.gnupg/gpg-agent.conf
        gpg-connect-agent reloadagent /bye
    fi

    # Clone scripts and dotfiles
    mkdir -p "${REPOS}"
    git clone git@github.com:nathanchance/scripts "${SCRIPTS}" || return 1
    git clone git@github.com:nathanchance/dotfiles "${DOTFILES}" || return 1

    # Copy files into their proper locations
    # .git-prompt.sh
    cp "${DOTFILES}"/common/.git-prompt.sh "${HOME}"
    # tmux
    cp "${DOTFILES}"/pixelbook/.tmux.conf "${HOME}"

    # Run small setup scripts from dotfiles
    bash "${DOTFILES}"/common/global_gitignore.sh

    # Setup bash_aliases
    if ! grep -q bash_setup "${HOME}"/.bashrc; then
        {
            echo
            echo "[[ -f \${HOME}/Downloads/persistent/repos/scripts/os/common ]] && source \"\${HOME}/Downloads/persistent/repos/scripts/os/common\""
            echo "type -p bash_setup && bash_setup"
        } >> "${HOME}"/.bashrc
    fi

    # Let her rip!
    source "${HOME}"/.bashrc
}


# Reinstall function in case Chromebrew blows up...
function install-bin() {
    # Wipe /usr/local and reinstall emerge packages
    [[ "${*}" =~ "-c" || "${*}" =~ "--clean" ]] && sudo dev_install --reinstall -y

    # Install adb/fastboot
    curl -s https://raw.githubusercontent.com/nathanchance/chromeos-adb-fastboot/master/install.sh | bash

    # Install neofetch
    sudo curl -s https://raw.githubusercontent.com/dylanaraps/neofetch/master/neofetch -o /usr/local/bin/neofetch
    sudo chmod a+x /usr/local/bin/neofetch

    # Install chromebrew + other desirable programs
    curl -Ls git.io/vddgY | bash
    yes | crew install -s mosh vim
    yes | crew install hub gnupg ripgrep tmux
    pip install speedtest-cli

    # Configure git
    git config --global commit.gpgsign true
    git config --global core.editor vim
    git config --global user.name "Nathan Chancellor"
    git config --global user.email "natechancellor@gmail.com"
    git config --global user.signingkey 2437CB76E544CB6AB3D9DFD399739260CB6CB716

    # Configure vim
    mkdir -p ~/.vim/.backup ~/.vim/.swp ~/.vim/.undo
    {
        echo
        echo "set undodir=~/.vim/.undo//"
        echo "set backupdir=~/.vim/.backup//"
        echo "set directory=~/.vim/.swp//"
    } >> ~/.vimrc

    # Install crouton and setup a Debian Stretch chroot
    sudo curl -s https://raw.githubusercontent.com/dnschneid/crouton/master/installer/crouton -o /usr/local/bin/crouton
    sudo chmod +x /usr/local/bin/crouton
}


# Pixelbook specific aliases
function crosh_aliases() {
    # Downloads folder
    alias dwnld='cd ${HOME}/Downloads'

    # Persistent folder
    alias per='cd ${HOME}/Download/persistent'

    # Files folder
    alias fls='cd ${HOME}/Downloads/persistent/files'

    # Connect to my server
    alias mshfb='mosh nathan@nathanchance.me'
}


# Setup PS1 and such
function crosh_prompt() {
    if [[ -f ${HOME}/.git-prompt.sh ]]; then
        source "${HOME}"/.git-prompt.sh
        export GIT_PS1_SHOWDIRTYSTATE=1
        export GIT_PS1_SHOWUPSTREAM=auto
        export PROMPT_COMMAND='__git_ps1_custom "\[\033[01;31m\]\u@\h \[\033[01;33m\]\w\[\033[01;36m\]" " \[\033[39m\]\$\[\033[0m\] "'
    fi
}


# Pixelbook specific shell setup
function crosh_setup() {
    crosh_prompt
    export PAGER=/usr/local/bin/most
    export MANPATH=/usr/local/man${MANPATH:+":${MANPATH}"}
    export VIMRUNTIME=${HOME}/.vim
}


# Neofetch function
function neofetch() {
    echo
    /usr/local/bin/neofetch --distro_shorthand tiny "${@}"
    echo
}


# Update function
function upd() {
    crew update
    crew upgrade
}


# Unzip files
function uz() {
    [[ ${#} -lt 1 ]] && { echo; echo "This function takes an argument!"; echo; return; }

    FILE=${1}
    EXTRACT_DIR=${1/.zip}

    mkdir -p "${EXTRACT_DIR}" || { echo; echo "Could not create ${PWD}/${EXTRACT_DIR}!"; echo; return; }
    bsdtar -C "${EXTRACT_DIR}" -x -f "${FILE}"
    cd "${EXTRACT_DIR}" || { echo; echo "${PWD}/${EXTRACT_DIR} doesn't exist!"; echo; return; }
}
